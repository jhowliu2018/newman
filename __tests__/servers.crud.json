{
	"info": {
		"_postman_id": "1a78f547-981b-4fc8-9111-4454cb5a4b30",
		"name": "Server CRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "fd1ed946-8fef-43ca-ab74-9f57c0199cfa",
			"name": "Login with potato id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8a89530e-bc11-4be9-88a8-a93df9bc3c65",
						"type": "text/javascript",
						"exec": [
							"const test = pm.test;",
							"const expect = pm.expect;",
							"const response = pm.response;",
							"",
							"test(\"should return a valid response\", () => {",
							"  expect(response.code).to.equal(200)",
							"});",
							"",
							"test(\"should return not null body\", () => {",
							"  expect(responseBody.length).to.be.above(0) ",
							"  pm.globals.set(\"AUTH_TOKEN\", responseBody);",
							"})",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "45fe544a-1be7-4208-bfed-7cf0ecb43a1a",
						"type": "text/javascript",
						"exec": [
							"pm.globals.clear()",
							"",
							"pm.globals.set(\"POTATO_ID\", JSON.stringify(data.auth));",
							"pm.globals.set(\"SERVER_IDS\", JSON.stringify([]));",
							"pm.globals.set(\"ix\", 0);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{POTATO_ID}}"
				},
				"url": {
					"raw": "{{host}}/api/account/potato/token",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"account",
						"potato",
						"token"
					]
				},
				"description": "get auth token with potato id"
			},
			"response": []
		},
		{
			"_postman_id": "44352391-ec22-47ae-a4c3-164b6a9ee6ce",
			"name": "Create Server",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "82c005c9-0a77-4200-b094-f5c5be4835ae",
						"type": "text/javascript",
						"exec": [
							"const test = pm.test;",
							"const expect = pm.expect;",
							"const response = pm.response;",
							"",
							"const body = response.json();",
							"const servers = JSON.parse(pm.globals.get(\"SERVER_IDS\"));",
							"",
							"test(\"Should return a valid response.\", () => {",
							"  expect(response.code).to.equal(200);",
							"});",
							"  ",
							"test(\"Should return a valid body.\", () => {",
							"  // https://www.liquid-technologies.com/online-json-to-schema-converter",
							"  const schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"id\": {",
							"        \"type\": \"string\",",
							"        \"examples\": [",
							"          \"xOaVQo\"",
							"        ]",
							"      }",
							"    },",
							"    \"required\": [",
							"      \"id\"",
							"    ] ",
							"  }",
							"",
							"  expect(tv4.validate(body, schema)).to.be.true;",
							"",
							"  servers.push(body.id);",
							" ",
							"  pm.globals.set(\"SERVER_IDS\", JSON.stringify(servers));",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "75974313-a6f9-4c1e-ae1a-57c1e3a5a3a0",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"REQUEST_BODY\", JSON.stringify(data.data))",
							"",
							"console.log(pm.globals.get(\"REQUEST_BODY\"))"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{AUTH_TOKEN}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{REQUEST_BODY}}"
				},
				"url": {
					"raw": "{{host}}/api/server",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"server"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "6f6deb14-1efa-4526-b0d7-8f4f6a779ef9",
			"name": "GET Server",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f21280ee-4bb8-4d37-aa49-21c73253e3eb",
						"type": "text/javascript",
						"exec": [
							"const test = pm.test;",
							"const expect = pm.expect;",
							"const response = pm.response;",
							"",
							"const body = response.json();",
							"",
							"test(\"Should return a valid response.\", () => {",
							"  expect(response.code).to.equal(200);",
							"});",
							"",
							"test(\"Should return a valid body.\", () => {",
							"    const schema = {",
							"    \t\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"    \t\"type\": \"object\",",
							"    \t\"properties\": {",
							"    \t\t\"dnsStatus\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"winPublicKeyId\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"winPrivateKeyId\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"os\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"records\": {",
							"    \t\t\t\"type\": \"array\",",
							"    \t\t\t\"items\": {}",
							"    \t\t},",
							"    \t\t\"ip\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"sshPassword\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"description\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"expiresDate\": {",
							"    \t\t\t\"type\": \"object\",",
							"    \t\t\t\"properties\": {",
							"    \t\t\t\t\"low\": {",
							"    \t\t\t\t\t\"type\": \"integer\"",
							"    \t\t\t\t},",
							"    \t\t\t\t\"high\": {",
							"    \t\t\t\t\t\"type\": \"integer\"",
							"    \t\t\t\t}",
							"    \t\t\t},",
							"    \t\t\t\"required\": [",
							"    \t\t\t\t\"low\",",
							"    \t\t\t\t\"high\"",
							"    \t\t\t]",
							"    \t\t},",
							"    \t\t\"type\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"winPassword\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"createAt\": {",
							"    \t\t\t\"type\": \"integer\"",
							"    \t\t},",
							"    \t\t\"ipStatus\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"features\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"port\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"machineParams\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"envType\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"domainName\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"name\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"banned\": {",
							"    \t\t\t\"type\": \"boolean\"",
							"    \t\t},",
							"    \t\t\"region\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"account\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"gateOnePassword\": {",
							"    \t\t\t\"type\": [\"string\", \"null\"]",
							"    \t\t},",
							"    \t\t\"id\": {",
							"    \t\t\t\"type\": \"string\"",
							"    \t\t},",
							"    \t\t\"team\": {",
							"    \t\t\t\"type\": \"array\",",
							"    \t\t\t\"items\": [",
							"    \t\t\t\t{",
							"    \t\t\t\t\t\"type\": \"object\",",
							"    \t\t\t\t\t\"properties\": {",
							"    \t\t\t\t\t\t\"teamName\": {",
							"    \t\t\t\t\t\t\t\"type\": \"string\"",
							"    \t\t\t\t\t\t},",
							"    \t\t\t\t\t\t\"chatId\": {",
							"    \t\t\t\t\t\t\t\"type\": \"string\"",
							"    \t\t\t\t\t\t}",
							"    \t\t\t\t\t},",
							"    \t\t\t\t\t\"required\": [",
							"    \t\t\t\t\t\t\"teamName\",",
							"    \t\t\t\t\t\t\"chatId\"",
							"    \t\t\t\t\t]",
							"    \t\t\t\t}",
							"    \t\t\t]",
							"    \t\t},",
							"    \t\t\"serverGroups\": {",
							"    \t\t\t\"type\": \"array\",",
							"    \t\t\t\"items\": {}",
							"    \t\t},",
							"    \t\t\"key\": {",
							"    \t\t\t\"type\": \"object\",",
							"    \t\t\t\"properties\": {",
							"    \t\t\t\t\"key\": {",
							"    \t\t\t\t\t\"type\": [\"string\", \"null\"]",
							"    \t\t\t\t},",
							"    \t\t\t\t\"name\": {",
							"    \t\t\t\t\t\"type\": [\"string\", \"null\"]",
							"    \t\t\t\t},",
							"    \t\t\t\t\"description\": {",
							"    \t\t\t\t\t\"type\": [\"string\", \"null\"]",
							"    \t\t\t\t},",
							"    \t\t\t\t\"id\": {",
							"    \t\t\t\t\t\"type\": [\"string\", \"null\"]",
							"    \t\t\t\t}",
							"    \t\t\t},",
							"    \t\t\t\"required\": [",
							"    \t\t\t  \"key\",",
							"    \t\t\t  \"name\",",
							"    \t\t\t  \"description\",",
							"    \t\t\t  \"id\"",
							"    \t\t\t]",
							"    \t\t},",
							"    \t\t\"permission\": {",
							"    \t\t\t\"type\": \"object\",",
							"    \t\t\t\"properties\": {",
							"    \t\t\t\t\"Read\": {",
							"    \t\t\t\t\t\"type\": \"boolean\"",
							"    \t\t\t\t},",
							"    \t\t\t\t\"Create\": {",
							"    \t\t\t\t\t\"type\": \"boolean\"",
							"    \t\t\t\t},",
							"    \t\t\t\t\"Update\": {",
							"    \t\t\t\t\t\"type\": \"boolean\"",
							"    \t\t\t\t},",
							"    \t\t\t\t\"Delete\": {",
							"    \t\t\t\t\t\"type\": \"boolean\"",
							"    \t\t\t\t},",
							"    \t\t\t\t\"Deploy\": {",
							"    \t\t\t\t\t\"type\": \"boolean\"",
							"    \t\t\t\t}",
							"    \t\t\t},",
							"    \t\t\t\"required\": [",
							"    \t\t\t\t\"Read\",",
							"    \t\t\t\t\"Create\",",
							"    \t\t\t\t\"Update\",",
							"    \t\t\t\t\"Delete\",",
							"    \t\t\t\t\"Deploy\"",
							"    \t\t\t]",
							"    \t\t},",
							"    \t\t\"otherIps\": {",
							"    \t\t\t\"type\": \"array\",",
							"    \t\t\t\"items\": {}",
							"    \t\t},",
							"    \t\t\"jumpServers\": {",
							"    \t\t\t\"type\": \"array\",",
							"    \t\t\t\"items\": {}",
							"    \t\t},",
							"    \t\t\"byos\": {",
							"    \t\t\t\"type\": \"array\",",
							"    \t\t\t\"items\": [",
							"    \t\t\t\t{",
							"    \t\t\t\t\t\"type\": \"object\",",
							"    \t\t\t\t\t\"properties\": {",
							"    \t\t\t\t\t\t\"name\": {",
							"    \t\t\t\t\t\t\t\"type\": \"string\"",
							"    \t\t\t\t\t\t},",
							"    \t\t\t\t\t\t\"teamName\": {",
							"    \t\t\t\t\t\t\t\"type\": \"string\"",
							"    \t\t\t\t\t\t},",
							"    \t\t\t\t\t\t\"description\": {",
							"    \t\t\t\t\t\t\t\"type\": \"string\"",
							"    \t\t\t\t\t\t},",
							"    \t\t\t\t\t\t\"chatId\": {",
							"    \t\t\t\t\t\t\t\"type\": \"string\"",
							"    \t\t\t\t\t\t},",
							"    \t\t\t\t\t\t\"id\": {",
							"    \t\t\t\t\t\t\t\"type\": \"string\"",
							"    \t\t\t\t\t\t},",
							"    \t\t\t\t\t\t\"status\": {",
							"    \t\t\t\t\t\t\t\"type\": \"string\"",
							"    \t\t\t\t\t\t},",
							"    \t\t\t\t\t\t\"default\": {",
							"    \t\t\t\t\t\t\t\"type\": \"boolean\"",
							"    \t\t\t\t\t\t},",
							"    \t\t\t\t\t\t\"endpoint\": {",
							"    \t\t\t\t\t\t\t\"type\": \"string\"",
							"    \t\t\t\t\t\t}",
							"    \t\t\t\t\t},",
							"    \t\t\t\t\t\"required\": [",
							"    \t\t\t\t\t\t\"name\",",
							"    \t\t\t\t\t\t\"teamName\",",
							"    \t\t\t\t\t\t\"description\",",
							"    \t\t\t\t\t\t\"chatId\",",
							"    \t\t\t\t\t\t\"id\",",
							"    \t\t\t\t\t\t\"status\",",
							"    \t\t\t\t\t\t\"default\",",
							"    \t\t\t\t\t\t\"endpoint\"",
							"    \t\t\t\t\t]",
							"    \t\t\t\t}",
							"    \t\t\t]",
							"    \t\t}",
							"    \t},",
							"    \t\"required\": [",
							"    \t\t\"dnsStatus\",",
							"    \t\t\"winPublicKeyId\",",
							"    \t\t\"winPrivateKeyId\",",
							"    \t\t\"os\",",
							"    \t\t\"records\",",
							"    \t\t\"ip\",",
							"    \t\t\"sshPassword\",",
							"    \t\t\"description\",",
							"    \t\t\"expiresDate\",",
							"    \t\t\"type\",",
							"    \t\t\"winPassword\",",
							"    \t\t\"createAt\",",
							"    \t\t\"ipStatus\",",
							"    \t\t\"features\",",
							"    \t\t\"port\",",
							"    \t\t\"machineParams\",",
							"    \t\t\"envType\",",
							"    \t\t\"domainName\",",
							"    \t\t\"name\",",
							"    \t\t\"banned\",",
							"    \t\t\"region\",",
							"    \t\t\"account\",",
							"    \t\t\"gateOnePassword\",",
							"    \t\t\"id\",",
							"    \t\t\"team\",",
							"    \t\t\"serverGroups\",",
							"    \t\t\"key\",",
							"    \t\t\"permission\",",
							"    \t\t\"otherIps\",",
							"    \t\t\"jumpServers\",",
							"    \t\t\"byos\"",
							"    \t]",
							"    };",
							"",
							"    expect(tv4.validate(body, schema)).to.be.true; ",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b626c775-ebc5-42a4-8898-b919527feeb3",
						"type": "text/javascript",
						"exec": [
							"const ix = parseInt(pm.globals.get(\"ix\"));",
							"",
							"const servers = JSON.parse(pm.globals.get(\"SERVER_IDS\"));",
							"",
							"if (ix < servers.length) {",
							"  const server = servers[ix];",
							"  ",
							"  pm.globals.set(\"ix\", ix+1);",
							"  pm.globals.set(\"SERVER_ID\", server);",
							"  postman.setNextRequest(\"PATCH Server\");",
							"} else {",
							"  postman.setNextRequest(\"Delete Servers\");",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{AUTH_TOKEN}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {},
				"url": {
					"raw": "{{host}}/api/server/{{SERVER_ID}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"server",
						"{{SERVER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "20065c52-26b5-4a81-9b84-637c7cfe1766",
			"name": "PATCH Server",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0ce6dd81-b633-4059-958a-e5ed3df8fb93",
						"type": "text/javascript",
						"exec": [
							"const test = pm.test;",
							"const expect = pm.expect;",
							"const response = pm.response;",
							"const patch = data.patch;",
							"",
							"test(\"Should return a valid response.\", () => {",
							"  expect(response.code).to.equal(200);",
							"});",
							"",
							"const token = pm.globals.get(\"AUTH_TOKEN\")",
							"const server = pm.globals.get(\"SERVER_ID\")",
							"",
							"const requests = {",
							"  url: `${data.host}/api/server/${server}`,",
							"  header: `Authorization:${token}`,",
							"  method: \"GET\"",
							"};",
							"",
							"pm.sendRequest(requests, (err, res) => {",
							"  const body = res.json();",
							"  ",
							"  test(\"Should match the patched part.\", () => {",
							"    expect(res.code).to.equal(200);",
							"    // Check the modified values is applied correctly",
							"    // patch data from data.json",
							"    for (var k in patch) {",
							"      expect(body).to.have.property(k, patch[k]);",
							"    }",
							"  })",
							"})",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1e4af102-fb57-4705-aa2b-5a6c0a466167",
						"type": "text/javascript",
						"exec": [
							"const ix = parseInt(pm.globals.get(\"ix\"));",
							"",
							"const servers = JSON.parse(pm.globals.get(\"SERVER_IDS\"));",
							"",
							"// Destructuring",
							"pm.globals.set(\"PATCH_BODY\", JSON.stringify(data.patch))",
							"",
							"// conditional flow",
							"if (ix+1 < servers.length) {",
							"  postman.setNextRequest(\"GET Server\");",
							"} else {",
							"  postman.setNextRequest(\"Delete Servers\");",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{AUTH_TOKEN}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{PATCH_BODY}}"
				},
				"url": {
					"raw": "{{host}}/api/server/{{SERVER_ID}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"server",
						"{{SERVER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"_postman_id": "63264f4a-3949-45a1-843c-cea8b3747053",
			"name": "Delete Servers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8da40cc4-4045-4a63-8545-5a8c0f8dcc82",
						"type": "text/javascript",
						"exec": [
							"const test = pm.test;",
							"const expect = pm.expect;",
							"const response = pm.response;",
							"const body = response.json();",
							"",
							"test(\"Should return a valid response\", () => {",
							"  expect(response.code).to.equal(200);",
							"});",
							"  ",
							"test(\"Should return a valid body\", () => {",
							"  const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"id\": {",
							"        \"type\": \"array\",",
							"        \"examples\": [",
							"          \"xOaVQo\",",
							"          \"xOaVQ2\"",
							"        ]",
							"      }",
							"    },",
							"    \"required\": [",
							"      \"id\"",
							"    ] ",
							"  }  ",
							"  expect(tv4.validate(body, schema)).to.be.true;",
							"});",
							"  ",
							"test(\"Should delete correct servers\", () => {",
							"  const servers = JSON.parse(pm.globals.get(\"SERVER_IDS\"));",
							"  ",
							"  expect(body.id).to.be.an(\"array\");",
							"  expect(body.id.length).to.equal(servers.length);",
							"  expect(body.id).to.include.members(servers);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{AUTH_TOKEN}}"
					},
					{
						"key": "asdsa",
						"value": "{{SERVER_IDS}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"serverIds\": {{SERVER_IDS}}\n}"
				},
				"url": {
					"raw": "{{host}}/api/servers/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"servers",
						""
					]
				}
			},
			"response": []
		}
	]
}